import SCons.Node
import SCons.Scanner

import atexit
import math
import os
import random
import sys
import time

target_count = 10
source_scan_count = 0
target_scan_count = 0
deps_count = 10

sources = ['source%d' % i for i in range(deps_count)]
source_deps = ['sourcedep%d' % i for i in range(deps_count)]
target_deps = ['targetdep%d' % i for i in range(deps_count)]

#last_source_scan_results = []
last_target_scan_results = []

def source_scan(node, env, scanpaths, arg):
    return source_deps

def target_scan(node, env, scanpaths, arg):
    global target_scan_count, last_target_scan_results
    target_scan_count = target_scan_count + 10

    for c in last_target_scan_results:
        if c.waiting_parents and node in c.waiting_parents and c.get_state() == SCons.Node.executing and not os.path.isfile(c.abspath):
            print('sleeping, waiting for child %s' % c.abspath)
            implicits = node.implicit.copy()
            time.sleep(2)
            if os.path.isfile(c.abspath):
                updated_implicits = node.implicit
                if implicits == updated_implicits:
                    raise Exception('They matched but the action to write %s ran! c.waiting_parents=%s, c.get_state()=%d' % (c.abspath, c.waiting_parents, c.get_state()))
                else:
                    raise Exception('Implicits were changed from underneath us. '
                                    'They were %s and now are %s' %
                                    (expected_implicits, implicits))
                break

    deps = []
    for d in target_deps:
        f = env.fs.File(d)
        deps.append(f)
        if not os.path.exists(f.abspath):
            break

    last_target_scan_results = deps
    return deps

def scanner(name, function, ext):
    return Scanner(
        name=name,
        function=function,
        argument=None,
        skeys=[ext])

source_scanner = scanner('sscan', source_scan, '.py')
target_scanner = scanner('tscan', target_scan, '.target')

build = Builder(action='$PYTHON -B $SOURCES[0] $TARGETS',
                source_scanner=source_scanner,
                target_scanner=target_scanner)
generate = Builder(action='$PYTHON -B $SOURCE $TARGETS')
env = Environment(tools=[], BUILDERS={'Build': build, 'Generate': generate},
                  PYTHON=sys.executable)

empties = []
for i in range(target_count):
    empty_py = env.Build(['empty%s%d.target' % (c, i) for c in ['a', 'b', 'c', 'd']],
                         ['empty.py'] + sources[:i+1])
    empties.extend(empty_py)

for dep in sources + source_deps + target_deps:
    env.AlwaysBuild(env.Generate(dep, 'generate.py'))

scan_count = 0

def node_custom_scan(self):
    global scan_count

    if self.implicit is not None:
        return

    ret = self._old_scan()

    if self in empties:
        scan_count = scan_count + 1
        implicits = [str(c) for c in self.implicit]
        expected_implicits = source_deps + [sys.executable] + target_deps
        if implicits != expected_implicits:
            raise Exception('Expected implicits %s, got %s' %
                            (expected_implicits, implicits))

    return ret

#SCons.Node.Node._old_scan = SCons.Node.Node.scan
#SCons.Node.Node.scan = node_custom_scan.__get__(None, SCons.Node.Node)

def validate_implicits():
    for empty_py in empties:
        implicit_raw = empty_py.implicit
        implicits = [str(c) for c in implicit_raw] if implicit_raw else []
        expected_implicits = source_deps + [sys.executable] + target_deps
        if implicits != expected_implicits:
            raise Exception('Expected implicits %s, got %s' %
                            (expected_implicits, implicits))

#atexit.register(validate_implicits)
def end():
    raise Exception('Scanned %d targets a total of %d times' %
                    (len(empties), target_scan_count))
#atexit.register(end)
